import operator
import marshmallow as ma
from stallion import util
from stallion.deploy.gae import AppEngineBaseAppDeployer
from .service_descriptor import ServiceDescriptorDeploySchema, ConfigDescriptorSchema
from .config_backend import ConfigBackendSchema
from .base import StrictSchema

class ProjectConfigSchema(StrictSchema):
    id = ma.fields.String(required = True)

    config_backend = ma.fields.Nested(ConfigBackendSchema)

    configurations = ma.fields.List(ma.fields.Nested(ConfigDescriptorSchema), missing = [])

    services = ma.fields.List(ma.fields.Nested(ServiceDescriptorDeploySchema), missing = [])

    app_engine_base_app_lenient = ma.fields.Boolean()

    @ma.validates_schema
    def check_service_names(self, data):
        services = data.get('services')
        if not services:
            return

        util.ensure_no_dupes(
                services,
                operator.itemgetter('name'),
                'Service names in project {}'.format(data.get('id')),
                ma.ValidationError)

    @ma.validates_schema
    def check_gae_base_app(self, data):
        if data.get('app_engine_base_app_lenient', False):
            return

        if 'services' not in data:
            return

        # Filter for valid services.  It's not clear to me whether this validator
        # can be called if there have been failures in parsing services, so
        # we make sure that the services present have the fields that we need
        # (other checks on services will be performed as part of the overall
        # deserialization process)
        valid_services = [ svc for svc in data['services']
                if 'deployment_type' in svc and 'component_type' in svc ]

        if all( not svc['deployment_type'].startswith('gae') for svc in valid_services ):
            # no check needed if no gae apps are configured
            return

        deployment_types_present = [ svc['deployment_type'] for svc in valid_services ]

        gae_base_app_count = len([ ct for ct in deployment_types_present
            if ct == AppEngineBaseAppDeployer.type ])

        if gae_base_app_count == 0:
            raise ma.ValidationError('GAE apps present but no base application found!', [ 'services' ])

        if gae_base_app_count > 1:
            raise ma.ValidationError('Multiple GAE base applications found!', [ 'services' ])
