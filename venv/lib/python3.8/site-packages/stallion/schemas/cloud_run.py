from .base import StrictSchema
import marshmallow as ma


class CloudRunSchema(StrictSchema):
    timeout = ma.fields.Integer(missing=60)
    memory  = ma.fields.String(missing="256Mi")
    platform = ma.fields.String(missing="managed")
    service_account = ma.fields.String()
    region = ma.fields.String(missing='us-central1')
    environment_variables = ma.fields.Dict(missing={})

    @ma.validates_schema
    def platform_is_allowed(self, data):
        allowed_platforms = set(['managed', 'gke', 'kubernetes'])

        if data.get('platform') in allowed_platforms:
            return

        raise ma.ValidationError('Platform {} not allowed. Allowed values are {}'.format(
            data.get('platform'), allowed_platforms))

    @ma.validates_schema
    def memory_is_allowed(self, data):
        allowed_memory_levels = set(['128Mi', '256Mi', '512Mi', '1Gi', '2Gi'])

        if data.get('memory') in allowed_memory_levels:
            return

        raise ma.ValidationError('Memory Level {} not allowed. Allowed values are {}'.format(
            data.get('memory'), allowed_memory_levels))

    @ma.validates_schema
    def timeout_is_below_max(self, data):
        max_timeout_in_sec = 900
        if data.get('timeout') is not None and data.get('timeout') <= max_timeout_in_sec:
            return

        raise ma.ValidationError(
            'Timeout {} not allowed. Timeout must be non-null and max timeout is {}'.format(
                data.get('timeout'), max_timeout_in_sec))
