from croniter import croniter
import marshmallow as ma
from stallion.schemas.base import StrictSchema
from stallion.components.base import BaseComponent


class PubSubTargetSchema(StrictSchema):
    data = ma.fields.String(required=True, validate=ma.validate.Length(min=1))
    topic_name = ma.fields.String(required=True)
    # NOTE that due to some challenging behavior re: updating attributes
    # on Pubsub messages through the gcloud API ("deleting" one leaves the key
    # with a value of empty string), attributes will not be supported
    # for MVP.


class CloudSchedulerJobSchema(StrictSchema):
    schedule = ma.fields.String(required=True)
    # TODO include the other targets (HTTP, AppEngine HTTP) if we decide 
    # to support them and validate exactly one is provided
    pub_sub_target = ma.fields.Nested(PubSubTargetSchema, required=True)
    name = ma.fields.String(required=True)
    # Defaults to 0
    max_retry_attempts = ma.fields.Integer(
        required=False,
        validate=ma.validate.Range(min=0, max=5))
    # Defaults to 5s
    min_backoff = ma.fields.Integer(required=True, missing=5)
    max_backoff = ma.fields.Integer(required=True, missing=3600)

    @ma.validates_schema
    def validate_cron_syntax(self, data):
        cron = data['schedule']
        if not croniter.is_valid(cron):
            raise ma.ValidationError('Invalid cron expression', cron)


class CloudSchedulerSchema(StrictSchema):
    jobs = ma.fields.List(ma.fields.Nested(CloudSchedulerJobSchema), 
        required=True)
