import marshmallow as ma
from .service_descriptor import DescriptorBaseSchema

class RuntimeConfigServiceSchema(ma.Schema):
    """ Schema to use for packaging up a Component into the appropriate object
        for deploying to the runtime config service.

        Primarily this serves to prune irrelevant/undesirable fields that are
        needed for deployment but not needed by the service at runtime.

        Note: use a standard ma.Schema, not a StrictSchema, because we want
              the schema to ignore unknown fields during serialization rather
              than error on them
    """
    descriptor = ma.fields.Nested(DescriptorBaseSchema(), required=True)
    config = ma.fields.Dict()

    @ma.pre_dump
    def strip_plaintext_secrets(self, data):
        from collections import MutableMapping
        def copy_of_data_with_key_deleted(data, key_to_delete):
            # if data is a dictionary, return a copy of the dictionary without the key
            if isinstance(data, MutableMapping):
                modified_dict = {}
                for key, value in list(data.items()):
                    if key is not key_to_delete:
                        modified_dict[key] = copy_of_data_with_key_deleted(value, key_to_delete)
                return modified_dict
            # if data's a list, return a copy of the list without the key
            elif isinstance(data, list):
                modified_list = []
                for item in data:
                    modified_list.append(copy_of_data_with_key_deleted(item, key_to_delete))
                return modified_list
            else:
                return data

        return copy_of_data_with_key_deleted(data, 'plaintext')
