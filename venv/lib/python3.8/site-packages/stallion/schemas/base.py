import six
import marshmallow as ma


class PermissiveSchema(ma.Schema):
    """
    In contrast to StrictSchema, the PermissiveSchema will silently ignore fields that it
    doesn't recognize.
    """
    pass


class StrictSchema(ma.Schema):
    """ Base schema class that rejects any input containing fields that are not
        recognized by the schema
    """
    @ma.validates_schema(pass_original = True)
    def check_no_unknowns(self, data, original_data):
        def check_single_datum(datum, fields_allowed):
            unknown = set(datum) - fields_allowed
            if unknown:
                raise ma.ValidationError('Unknown field', unknown)

        fields_allowed = set(field.attribute or field_name
                for (field_name, field) in six.iteritems(self.fields))

        fields_allowed |= set(self.exclude or [])

        if self.many:
            for item in original_data:
                check_single_datum(item, fields_allowed)
        else:
            check_single_datum(original_data, fields_allowed)
