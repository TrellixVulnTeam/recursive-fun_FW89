from .base import StrictSchema
import marshmallow as ma

class CloudFunctionSchema(StrictSchema):
    code_bucket = ma.fields.String()

    # this is the default timeout CF uses
    timeout = ma.fields.Integer(missing=60)
    # this is the default memory CF uses
    memory  = ma.fields.Integer(missing=256)
    retry   = ma.fields.Boolean(missing=False)
    topic   = ma.fields.String()
    entrypoint = ma.fields.String(missing="subscribe")
    runtime = ma.fields.String()
    service_account = ma.fields.String()
    vpc_connector = ma.fields.String()
    # If not provided, this will default to providers/cloud.pubsub/eventTypes/topic.publish
    trigger_event = ma.fields.String()
    environment_variables = ma.fields.Dict(missing={})

    @ma.validates_schema
    def memory_is_allowed_value(self, data):
        allowed_memory_in_mb = set([128, 256, 1024, 2048])

        if data.get('memory') in allowed_memory_in_mb:
            return

        raise ma.ValidationError('Memory {}MB not allowed. Allowed values are {}'.format(
                            data.get('memory'), allowed_memory_in_mb))

    @ma.validates_schema
    def runtime_is_allowed_value(self, data):
        allowed_runtimes = set([
            'nodejs8', 'nodejs10', 'nodejs12', 'nodejs14',
            'python37', 'python38', 'python39',
            'go111', 'go113',
            'java11', 'dotnet3', 'ruby26'])

        if data.get('runtime') in allowed_runtimes:
            return

        raise ma.ValidationError('Runtime {} not allowed. Allowed values are {}'.format(
                            data.get('runtime'), allowed_runtimes))
