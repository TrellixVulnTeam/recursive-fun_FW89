import operator
import marshmallow as ma
from stallion import util
from .base import StrictSchema

class CloudSqlDatabaseSchema(StrictSchema):
    name = ma.fields.String(required=True)
    user = ma.fields.String(required=True)
    password = ma.fields.String(required=True)

class CloudSqlSchema(StrictSchema):
    instance_name = ma.fields.String(required=True)

    databases = ma.fields.List(ma.fields.Nested(CloudSqlDatabaseSchema()), required=True)

    @ma.validates_schema
    def no_empty_databases(self, data):
        if not data.get('databases'):
            raise ma.ValidationError('Must specify at least one database', [ 'databases' ])

    @ma.validates_schema
    def no_duplicate_databases(self, data):
        dbs = data.get('databases', [])

        util.ensure_no_dupes(
                dbs,
                operator.itemgetter('name'),
                'Database names for instance {}'.format(data.get('instance_name')),
                ma.ValidationError)
