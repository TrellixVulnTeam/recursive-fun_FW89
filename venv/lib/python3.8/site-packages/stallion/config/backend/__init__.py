import logging
from .runtime_config import RuntimeConfigBackend
from .local_dict import LocalDictConfigBackend
from .gcs import GCSConfigBackend
from .cloud_scheduler import CloudSchedulerConfigBackend

SUPPORTED_BACKENDS = {
    item.name: item for item in [
        RuntimeConfigBackend,
        LocalDictConfigBackend,
        GCSConfigBackend,
        CloudSchedulerConfigBackend,
    ]
}


def default_config_backend_conf(project_id):
    return {
        'backend_type': RuntimeConfigBackend.name,
        'properties': {
            'project_id': project_id,
        }
    }


def build_config_backend(backend_conf):
    """ Build a config backend for the provided backend_conf object.
        If backend_conf is empty, we default to RuntimeConfigBackend,
        for now at least.  Longer term, backend_conf should be a required
        argument.
    """
    config_backend_cls = SUPPORTED_BACKENDS[backend_conf['backend_type']]
    return config_backend_cls(backend_conf.get('properties'))
