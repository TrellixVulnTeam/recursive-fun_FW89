import os
import json
from stallion import exceptions, constants

def config_backend_from_environment(project_id):
    """ Instantate a ConfigBackend object using a configuration pulled from
        an environment variable.  The environment variable name is defined as
        stallion.constants.CONFIG_BACKEND_ENV_VAR.

        TODO: remove the project_id argument once we no longer need the option
        to fall back on a default backend.

        :param project_id: the GCP project ID
        :type project_id: string
    """
    from stallion.schemas.config_backend import ConfigBackendSchema
    from stallion.config import backend

    backend_conf_json = os.getenv(constants.CONFIG_BACKEND_ENV_VAR)
    if not backend_conf_json:
        raise exceptions.NoConfigBackendInEnvironment(
            'Config backend environment variable `{}` not found!'.format(
                constants.CONFIG_BACKEND_ENV_VAR))

    backend_conf_dict = None
    try:
        backend_conf_dict = json.loads(backend_conf_json)
    except Exception as e:
        raise exceptions.NoConfigBackendInEnvironment(
            'Invalid config backend found in environment variable `{}`: `{}` ({})'.format(
                constants.CONFIG_BACKEND_ENV_VAR,
                backend_conf_json,
                e,
            ))

    validated = ConfigBackendSchema().load(backend_conf_dict)
    if validated.errors:
        raise exceptions.NoConfigBackendInEnvironment(
            'Invalid config backend found in environment variable `{}`: `{}` ({})'.format(
                constants.CONFIG_BACKEND_ENV_VAR,
                backend_conf_dict,
                validated.errors,
            ))

    return backend.build_config_backend(validated.data)
