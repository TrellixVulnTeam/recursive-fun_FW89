from builtins import str
from .gae import AppEngine
from .gce import ComputeEngine
from .test import LocalTesting
from stallion import exceptions

def select_from_environment(choices=None):
    choices = choices or [AppEngine, ComputeEngine, LocalTesting]
    hits = []
    errors = []

    for env_cls in choices:
        try:
            hit = env_cls.load_from_environment()
            hits.append(hit)
        except exceptions.InvalidRuntime as e:
            errors.append(str(e))
            pass

    if not hits:
        raise Exception(
            'Failed to detect runtime environment. '
            'The available runtime environments generated the following '
            'messages:\n {}'.format(
                '\n---\n'.join(errors)))

    if len(hits) > 1:
        raise Exception(
            'Ambiguous runtime environment: settings found for '
            'environments `{}`'.format(
                '`, `'.join(hit.name for hit in hits)))

    return hits[0]
