import os
from stallion import exceptions
from stallion.client.runtime import ClientRuntime

class AppEngine(ClientRuntime):
    name = "gae"
    service_port = 8080
    external_ssl_termination = True

    def __init__(self, project_id, component_name, component_version):
        self._project_id = project_id
        self._component_name = component_name
        self._component_version = component_version

    @classmethod
    def load_from_environment(cls):
        project_id = os.getenv('GOOGLE_CLOUD_PROJECT') or os.getenv('GCLOUD_PROJECT')
        component_name = os.getenv('GAE_SERVICE')
        component_version = os.getenv('GAE_VERSION')

        if not all([
                project_id,
                component_name,
                component_version]):
            raise exceptions.InvalidRuntime(
                'Not a valid App Engine runtime.  Expected environment '
                'variables:\n  GOOGLE_CLOUD_PROJECT (found: {})\n  '
                'GAE_SERVICE (found: {})\n  GAE_VERSION (found: {})'.format(
                    project_id,
                    component_name,
                    component_version))

        return cls(
                project_id=project_id,
                component_name=component_name,
                component_version=component_version)

    @property
    def project_id(self):
        return self._project_id

    @property
    def component_name(self):
        return self._component_name

    @property
    def component_version(self):
        return self._component_version

    @property
    def server_name(self):
        return '{self.component_name}-dot-{self.project_id}.appspot.com'.format(
                self=self)

    def log_handler(self, log_name):
        try:
            from google.cloud.logging import Client
            from google.cloud.logging.handlers.app_engine import AppEngineHandler
        except ImportError:
            return super(AppEngine, self).log_handler(log_name)

        client = Client(_use_grpc=False)
        return AppEngineHandler(
            client,
            name=log_name)
