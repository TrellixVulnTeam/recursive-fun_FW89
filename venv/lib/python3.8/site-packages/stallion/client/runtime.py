from builtins import object
import abc
import logging
import uritools
from future.utils import with_metaclass


class ClientRuntime(with_metaclass(abc.ABCMeta, object)):
    secure = True

    # Property to indicate whether this environment has its SSL termination
    # configured externally or not.
    external_ssl_termination = False

    @classmethod
    def load_from_environment(cls):
        raise NotImplementedError(
            'Class {} has not implemented the load_from_environment() method!'.format(
                cls.__name__))

    @abc.abstractproperty
    def name(self):
        pass

    @abc.abstractproperty
    def project_id(self):
        pass

    @abc.abstractproperty
    def component_name(self):
        pass

    @abc.abstractproperty
    def component_version(self):
        pass

    @abc.abstractproperty
    def service_port(self):
        pass

    @abc.abstractproperty
    def server_name(self):
        pass

    def log_handler(self, log_name):
        """ Method to return a configured log-handler for the current runtime.
            This allows us to set up logging to stackdriver easily using a
            common interface across services.
        """
        handler = logging.StreamHandler()
        handler.set_name(log_name)
        return handler

    @property
    def scheme(self):
        return 'https' if self.secure else 'http'

    @property
    def authority(self):
        if self.external_ssl_termination:
            return self.server_name

        if (self.secure and self.service_port == 443) or \
                ((not self.secure) and self.service_port == 80):
            return self.server_name

        return '{host}:{port}'.format(
            host=self.server_name,
            port=self.service_port)
