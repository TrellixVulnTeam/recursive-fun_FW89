from builtins import object
from stallion.plugins.manager import PluginManager
import operator
from stallion import util

class ComponentManager(object):
    def __init__(self, component_type_mapping=None):
        self._component_type_mapping = component_type_mapping

    @property
    def component_type_mapping(self):
        if self._component_type_mapping:
            return self._component_type_mapping

        self._component_type_mapping = util.keyby(
                PluginManager.load_components(),
                operator.attrgetter('type'),
                'Building mapping from component type to component class')

        return self._component_type_mapping

    def get_component(
            self,
            descriptor,
            config_dir,
            config,
            validate_config=True,
            decrypt_secrets=False,
            ignore_fields=None):

        component_cls = self.component_type_mapping.get(descriptor['component_type'])

        if not component_cls:
            raise Exception(
                    'Component type `{}` not found (available types are {})'.format(
                        descriptor['component_type'],
                        ', '.join(list(self.component_type_mapping.keys()))))

        return component_cls(
                descriptor = descriptor,
                config_dir = config_dir,
                config = config,
                validate_config = validate_config,
                decrypt_secrets = decrypt_secrets,
                ignore_fields = ignore_fields)
