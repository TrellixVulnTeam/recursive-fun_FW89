from builtins import map
import json
import subprocess
import os
import logging
from stallion.deploy.base import \
        BaseVersionedArtifactDeployer, \
        ServiceVersion
from stallion import util


class GCRServiceVersion(ServiceVersion):

    is_active = True

    def __init__(self, item):
        code_version = item.get('metadata', {}).get('labels', {}).get('code_version')
        super(GCRServiceVersion, self).__init__(
                service_name=os.path.basename(item['metadata']['name']),
                version=util.decode_version(code_version) if code_version else None)


class CloudRunDeployer(BaseVersionedArtifactDeployer):
    type = 'cloud-run'

    def get_deployed_versions(self, relevant_components):
        '''
        Get the names and deployed versions of all the cloud run services.
        Cloud run services added other ways, e.g. via the console won't have
        a code_version label so we filter those None values out.
        '''
        cmd = [
            'gcloud',
            'beta',
            'run',
            'services',
            'list',
            '--platform', 'managed',
            '--format', 'json',
            '--project', self.project_id]

        return [
            gcr for gcr in map(GCRServiceVersion, json.loads(subprocess.check_output(cmd).decode('utf-8')))
            if gcr.version]

    def gcloud_extra_args(self, component):
        image_url = component.build_image_url()
        return ['--image', image_url]

    def build_gcloud_deploy_args(self, component):
        config = component.descriptor['cloud_run']

        env_vars = config.get('environment_variables', {})
        env_vars_str = (
            "" if not env_vars else
            "--set-env-vars=" + ",".join(["{}={}".format(key, value) for key, value in env_vars.items()]))
        base_args = """
            gcloud beta run deploy {cloud_run_service_name} \
                --memory={memory} \
                --timeout={timeout} \
                --update-labels='code_version={version}' \
                --project={project_id} \
                --region={region} \
                --service-account={service_account} \
                --platform={platform} \
                --no-allow-unauthenticated \
                {env_vars_str}
        """.format(
            cloud_run_service_name=component.name,
            timeout=config['timeout'],
            memory=config['memory'],
            version=util.encode_version(component.code_version),
            service_account=config['service_account'],
            platform=config['platform'],
            region=config['region'],
            project_id=self.project_id,
            env_vars_str=env_vars_str).strip()

        # Add image argument
        extra_args = self.gcloud_extra_args(component)
        cmd = base_args + " " + " ".join(extra_args)

        return self.prettify_output(cmd)

    def _run_gcloud_deploy_args(self, gcloud_args):
        logging.debug("Starting to run deployment args {}".format(gcloud_args))
        subprocess.check_call(gcloud_args, shell=True)

    def _do_deploy(self, component, existing_versions, tempdir, dry_run):
        gcloud_args = self.build_gcloud_deploy_args(component)

        if dry_run:
            logging.info('Dry run: Skipping execution of gcloud command `%s`', gcloud_args)
            return

        else:
            self._run_gcloud_deploy_args(gcloud_args)
