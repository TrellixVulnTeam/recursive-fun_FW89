from builtins import map
import json
import subprocess
import os
import logging
from stallion.deploy.base import \
        BaseVersionedArtifactDeployer, \
        ServiceVersion
from stallion import util


class GCFServiceVersion(ServiceVersion):
    def __init__(self, item):
        code_version = item.get('labels', {}).get('code_version')
        super(GCFServiceVersion, self).__init__(
                service_name=os.path.basename(item['name']),
                version=util.decode_version(code_version) if code_version else None)

    is_active = True


class CloudFunctionDeployer(BaseVersionedArtifactDeployer):
    type = 'cloud_function'

    def get_deployed_versions(self, relevant_components):
        '''
        Get the names and deployed versions of all the cloud functions. Cloud functions added other ways, e.g. via
        the console won't have a code_version label so we filter those None values out.
        '''
        cmd = [
                'gcloud',
                'beta',
                'functions',
                'list',
                '--format=json',
                '--project', self.project_id]

        return [
                gcf for gcf in map(GCFServiceVersion, json.loads(subprocess.check_output(cmd).decode('utf-8')))
                if gcf.version ]


    @classmethod
    def _build_source_path(cls, name, version):
        return "cloud_function_code/{name}/{name}-{version}.zip".format(
                    name=name,
                    version=version)


    def build_gcloud_deploy_args(self, component, source_path):

        config = component.descriptor['cloud_function']

        env_vars = config.get('environment_variables', {})
        env_vars_str = (
            "" if not env_vars else
            "--set-env-vars=" + ",".join(["{}={}".format(key, value) for key, value in env_vars.items()]))

        template_version = util.encode_version(component.code_version)

        trigger_event = config['trigger_event'] \
            if 'trigger_event' in config else 'providers/cloud.pubsub/eventTypes/topic.publish'
        service_account = '--service-account {}'.format(config['service_account']) \
            if 'service_account' in config else ''
        vpc_connector = '--vpc-connector {}'.format(config['vpc_connector']) \
            if 'vpc_connector' in config else ''

        cmd = """
            gcloud functions deploy {cloud_function_name} \
                            --runtime {runtime} \
                            --memory {memory} \
                            --source {source_path} \
                            --timeout {timeout} \
                            --update-labels='code_version={version}' \
                            --trigger-event {trigger_event} \
                            --trigger-resource {topic} \
                            --entry-point {entrypoint} \
                            --project {project_id} \
                            {retry} \
                            {service_account} \
                            {vpc_connector} \
                            {env_vars_str}
            """.format(cloud_function_name=component.name,
                       runtime=config['runtime'],
                       timeout=config['timeout'],
                       memory=config['memory'],
                       trigger_event=trigger_event,
                       source_path=source_path,
                       version=util.encode_version(component.code_version),
                       retry="--retry" if config['retry'] else '',
                       service_account=service_account,
                       vpc_connector=vpc_connector,
                       entrypoint=config['entrypoint'],
                       topic=config['topic'],
                       project_id=self.project_id,
                       env_vars_str=env_vars_str).strip()

        return self.prettify_output(cmd)


    def _run_gcloud_deploy_args(self, gcloud_args):
        logging.debug("Starting to run deployment args {}".format(gcloud_args))
        subprocess.check_call(gcloud_args, shell=True)


    def _do_deploy(self, component, existing_versions, tempdir, dry_run):

        bucket_path = "gs://{}/{}".format(component.descriptor['cloud_function']['code_bucket'],
                        self._build_source_path(component.descriptor['component_type'], component.code_version))

        gcloud_args = self.build_gcloud_deploy_args(component, bucket_path)

        if dry_run:
            logging.info('  dry run: Skipping execution of gcloud command `%s`', gcloud_args)
            return

        else:
            self._run_gcloud_deploy_args(gcloud_args)
