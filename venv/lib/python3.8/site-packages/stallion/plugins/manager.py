from builtins import object
import logging
import pkg_resources
from stallion.plugins.base import StallionPluginBase

class PluginManager(object):
    """ A class for accessing the installed Stallion plugins and retrieving
        items from them.  All plugins must be subclasses of the class
        StallionPluginBase, and they must be made accessible to the python
        environment via the `entry_points` hook for setuptools.

        For more info, see: https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins

        For stallion plugins, the entry point group name used in setup.py
        must match that defined below.
    """

    ENTRY_POINT_GROUP = 'stallion_plugin'

    @classmethod
    def load_components(cls):
        return [
                c for plugin in cls._load_package_plugins()
                for c in plugin.components
                ]

    @classmethod
    def _load_package_plugins(cls):
        items = [
                entry_point.load()() for entry_point in
                pkg_resources.iter_entry_points(cls.ENTRY_POINT_GROUP)
                ]

        valid = []
        invalid = []
        for entry_point in pkg_resources.iter_entry_points(cls.ENTRY_POINT_GROUP):
            plugin_cls = entry_point.load()

            if not issubclass(plugin_cls, StallionPluginBase):
                invalid.append(plugin_cls)
                continue

            valid.append(plugin_cls())

        if invalid:
            logging.warn(
                    'Ignoring invalid plugins: %s (not subclasses of '
                    'StallionPluginBase)',
                    invalid)

        return valid


