import os
import json

from stallion.cache import CachingConfigLoader
from stallion.constants import NO_CODE_VERSION, CONFIG_BACKEND_ENV_VAR
from stallion.exceptions import ConfigDoesNotExistException
from stallion_etsy_plugin.components.adhoc import Adhoc
from stallion.client.runtimes.static import StaticRuntime

class AdhocConfigLoader(CachingConfigLoader):
    refresh_time_sec = None

    @classmethod
    def extra_config_validator(cls, descriptor, config):
        """ Override the extra_config_validator method to check to make sure
            that we loaded the proper config type
        """
        if descriptor['component_type'] != Adhoc.type:
            raise Exception('Loaded an invalid config of type {} (expected type is {}): {}'.format(
                descriptor['component_type'],
                Adhoc.type,
                config))

        return config


    def __init__(
            self,
            project_id,
            adhoc_config_name='adhocs'):
        self.project_id = project_id
        self.adhoc_config_name = adhoc_config_name

        if CONFIG_BACKEND_ENV_VAR not in os.environ:
            os.environ[CONFIG_BACKEND_ENV_VAR]=json.dumps(
                {
                    "backend_type": "google_cloud_storage",
                    "properties": {
                        "bucket_name": "etsy-dataproc-adhoc-configs-90aq79",
                        "path_prefix": self.project_id
                    }
                }
            )
        else:
            print("Using predefined " + CONFIG_BACKEND_ENV_VAR + " [" + os.environ[CONFIG_BACKEND_ENV_VAR] + "]")

        runtime = StaticRuntime(
                project_id=project_id,
                component_name=adhoc_config_name,
                component_version=NO_CODE_VERSION)

        try:
            super(AdhocConfigLoader, self).__init__(runtime=runtime)
        except ConfigDoesNotExistException:
            raise Exception(
                    'Error: project {} does not contain the adhoc configuration `{}`!'.format(
                project_id,
                adhoc_config_name))
