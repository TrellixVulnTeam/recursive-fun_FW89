from stallion.schemas.base import PermissiveSchema
import marshmallow as ma

class DatacopClientSchema(PermissiveSchema):
    """ Schema for clients of Datacop, used to specify the pubsub bus that
        Datacop listens to, and the default email address for alerts
    """

    """
    Repeating this comment as it is a nested component of the AirflowSchema:

    Please be extremely careful adding new fields to AirflowSchema. New
    fields added here will be immediately required from Airflow if the
    config ends up containing that field. go/dataplatissues on 2020-05-19
    if you don't believe me.
    
    To limit risk, perform the following steps:
    - Add new component config property here
    - Up the pin on stallion in airflow's etsy-dag-api and etsy-airflow-plugins
      setup.py's so that stallion is updated once the Airflow build runs
    - Build airflow
    - Deploy airflow (to one or both dev instances)
    - Up jenkins-common.json in BigDataConf (you can also add the property at this
      point in the airflow-dev component configs)
    - Test in dev and make sure it all works
    - Do the same airflow deploy to Prod BEFORE adding the component config
      properties
    """
    pubsub_project_id = ma.fields.String() # defaults to current project id
    pubsub_topic = ma.fields.String(required=True)

    # default_failure_emails is the list of email addresses that will be used
    # as the default for any failure message.  This can be overridden by,
    # for instance, airflow task or dag configs.
    default_failure_emails = ma.fields.List(ma.fields.Email, required=True)

    # extra_failure_emails are emails that will always receive failure
    # messages; unlike default_failure_emails, this field cannot be overridden
    extra_failure_emails = ma.fields.List(ma.fields.Email)

    # similar configuration settings for slack channels to which to send
    # datacop alerts.  Make this a list for now, so that we don't have to
    # go back and adjust the schema and configs later, even though right now
    # datacop does not support multiple slack channels.
    default_slack_channels = ma.fields.List(ma.fields.String)

    @ma.validates_schema
    def at_most_one_slack_channel(self, data):
        channels = data.get('default_slack_channels', [])

        if not channels or len(channels) == 1:
            return

        raise ma.ValidationError(
            'Sorry, only one slack channel can be used for datacop '
            'alerting at this time (found: {})'.format(channels),
            ['default_slack_channels'])

    @ma.validates_schema
    def slack_channels_format_check(self, data):
        def check_channel(channel):
            if not channel.startswith('#') or \
                    len(channel) > 22 or \
                    '_' in channel:
                raise ma.ValidationError(
                        'Invalid slack channel name: {}.  Channels must begin '
                        'with the # character, must be no longer than 22 '
                        'characters, and must not contain underscores'.format(
                            channel), ['default_slack_channels'])

        for channel in data.get('default_slack_channels', []):
            check_channel(channel)
