import operator
import marshmallow as ma
from stallion.schemas.base import StrictSchema
from stallion.schemas.secret import Secret
from stallion import util


class AuthorizationGroupSchema(StrictSchema):
    name = ma.fields.String(required=True)
    allow_all_etsy = ma.fields.Boolean(missing=False)
    user_id_safelist = ma.fields.List(ma.fields.String(), missing = [])
    email_safelist = ma.fields.List(ma.fields.Email(), missing = [])
    user_id_blocklist = ma.fields.List(ma.fields.String(), missing = [])
    email_blocklist = ma.fields.List(ma.fields.Email(), missing = [])

    @ma.validates_schema
    def at_least_some_allowed_users(self, data):
        if data.get('allow_all_etsy'):
            return

        if data.get('user_id_safelist'):
            return

        if data.get('email_safelist'):
            return

        raise ma.ValidationError('No users are permitted by the rules for this group!', [ data.get('name') ])

    @ma.post_load
    def clean_strings(self, data):
        def clean(s):
            return s.lower().strip()

        keys = [ 'user_id_safelist', 'email_safelist', 'user_id_blocklist', 'email_blocklist' ]

        copy = data.copy()
        for key in keys:
            copy[key] = list(filter(None, [clean(s) for s in copy[key]]))

        return copy


class AuthorizationSchema(StrictSchema):
    authorized_groups = ma.fields.List(ma.fields.Nested(AuthorizationGroupSchema), required = True)
    secrets = ma.fields.List(ma.fields.Nested(Secret()))

    service_account_key = ma.fields.Nested(Secret)
    oauth_client_secret = ma.fields.Nested(Secret)
    tls_key = ma.fields.Nested(Secret)
    tls_crt= ma.fields.Nested(Secret)
    slack_secret = ma.fields.Nested(Secret)
    gmail_secret = ma.fields.Nested(Secret)

    @ma.validates_schema
    def tls_has_both_fields(self, data):
        count = len(list(filter(None, [ data.get('tls_key'), data.get('tls_crt') ])))
        if count == 1:
            raise ma.ValidationError('Either tls_key & tls_crt must both be empty or they must both be specified. You have only {} specified'.format(
                    data.get('tls_key') or data.get('tls_crt')))


    @ma.validates_schema
    def no_dupe_auth_group_names(self, data):
        util.ensure_no_dupes(
                data['authorized_groups'],
                operator.itemgetter('name'),
                'Checking Authorized Group Names')

    @ma.validates_schema
    def at_least_one_auth_group(self, data):
        if not data.get('authorized_groups'):
            raise ma.ValidationError('Please provide at least one authorized group!', [ 'authorized_groups' ])
